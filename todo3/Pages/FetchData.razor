@page "/fetchdata"

@using todo3.Data
@using DataAccessLibrary.User

@inject WeatherForecastService ForecastService
@inject UserService User

<h2>Fetching data</h2>
<h3>Weather forecast (Local)</h3>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>MongoDB</h3>
@if (users is null)
{
    <p>Loading......</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>

                    <td>@user.FirstName</td>

                    <td>@user.LastName</td>

                    <td>@user.Email</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;

    public IEnumerable<User> users = null;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

        users = User.Get();
    }
}
